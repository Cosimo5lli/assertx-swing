/*
 * generated by Xtext 2.13.0
 */
package org.assertx.swing.formatting2

import org.assertx.swing.assertXSwing.AXSSettings
import org.assertx.swing.assertXSwing.AXSTestCase
import org.assertx.swing.assertXSwing.AXSTestMethod
import org.eclipse.xtext.formatting2.IFormattableDocument
import org.eclipse.xtext.xbase.formatting2.XbaseFormatter

import static org.assertx.swing.assertXSwing.AssertXSwingPackage.Literals.*
import static extension org.assertx.swing.AssertXSwingStaticExtensions.*

class AssertXSwingFormatter extends XbaseFormatter {

	def dispatch void format(AXSTestCase testCase, extension IFormattableDocument document) {
		testCase.regionFor.keyword('testing').prepend[noSpace].append[oneSpace]
		testCase.testedTypeRef.format;
		testCase.testedTypeRef.append[newLines = 2]
		testCase.settings.format;
		val tests = testCase.tests
		val last = tests.last
		for (testMethod : tests) {
			testMethod.format;
			if (testMethod === last) {
				testMethod.append[newLine]
			} else {
				testMethod.append[newLines = 2]
			}
		}
	}

	def dispatch void format(AXSTestMethod testMethod, extension IFormattableDocument document) {
		testMethod.regionFor.keyword('test').prepend[noSpace].append[oneSpace]
		testMethod.regionFor.feature(AXS_TEST_METHOD__NAME).surround[oneSpace]
		testMethod.getBlock.format;
	}

	def dispatch void format(AXSSettings settings, extension IFormattableDocument document) {
		settings.regionFor.keyword('settings').prepend[noSpace].append[oneSpace]
		settings.block.format
		settings.append[newLines = 2]
	}
}
