package org.assertx.swing

import java.util.HashMap
import java.util.List
import org.assertx.swing.assertXSwing.AXSMatcher
import org.assertx.swing.assertXSwing.AXSMatcherRef
import org.assertx.swing.assertXSwing.AXSSettings
import org.assertx.swing.assertXSwing.AXSTestCase
import org.assertx.swing.assertXSwing.AXSTestMethod
import org.assertx.swing.jvmmodel.AssertXSwingJvmModelInferrer

class AssertXSwingStaticExtensions {

	public static val GENERATED_PREFIX = '_generated_'

	def static getCheckedFieldName(AXSTestCase tc) {
		tc.fieldName ?: 'window'
	}

	def static getCheckedTypeRefName(AXSTestCase tc) {
		tc.testedTypeRef?.simpleName ?: Void.TYPE.simpleName
	}

	def static getAutogeneratedMethodNameForMatcher(HashMap<AXSTestMethod, String> mappings, AXSTestMethod method) {
		GENERATED_PREFIX + mappings.get(method)
	}

	def static getSettings(AXSTestCase tc) {
		tc.members.filter(AXSSettings).head
	}

	def static getTests(AXSTestCase tc) {
		tc.members.filter(AXSTestMethod)
	}

	def static setSettings(AXSTestCase tc, AXSSettings settings) {
		tc.members.removeAll(tc.members.filter(AXSSettings))
		tc.members += settings
	}

	def static getMatchers(AXSTestCase tc) {
		tc.members.filter(AXSMatcher)
	}

	def static getTypeName(AXSMatcherRef ref) {
		ref.reference.typeName
	}

	def static getTypeName(AXSMatcher m) {
		m.name.toFirstUpper
	}

	def static getCamelCaseMethodsNamesMappings(AXSTestCase tc) {
		val methodsNamesMappings = newHashMap
		val collisions = newHashMap
		for (test : tc.tests) {
			methodsNamesMappings.put(test, collisions.generateCamelCaseNameFor(test))
		}
		return methodsNamesMappings
	}

	def static private generateCamelCaseNameFor(HashMap<String, Integer> methodsNamesCollisions, AXSTestMethod tm) {
		val name = tm.name
		if(name === null) return null

		var ccn = name.replaceAll('[^a-zA-Z0-9$_ ]', '').split(' ').map[toFirstUpper].join.toFirstLower
		if (!ccn.matches('[a-z$_][a-zA-Z0-9$_]*'))
			ccn = '_' + ccn

		return methodsNamesCollisions.manageCollisionsAndGetName(ccn)
	}

	def static private String manageCollisionsAndGetName(HashMap<String, Integer> methodsNamesCollisions, String ccn) {
		if (methodsNamesCollisions.containsKey(ccn)) {
			val num = methodsNamesCollisions.get(ccn)
			methodsNamesCollisions.put(ccn, num + 1)
			return ccn + '_' + num + '_'
		} else {
			methodsNamesCollisions.put(ccn, 1)
			return ccn
		}
	}

	def static List<String> getGeneratedMethodsNames(AXSTestCase tc) {
		val list = newLinkedList
		list += AssertXSwingJvmModelInferrer.BEFORE_CLASS_METHOD_NAME
		list += AssertXSwingJvmModelInferrer.BEFORE_METHOD_NAME
		list += AssertXSwingJvmModelInferrer.AFTER_METHOD_NAME
		if (tc?.settings !== null) {
			list += AssertXSwingJvmModelInferrer.SETTINGS_METHOD_NAME
		}
		return list
	}
}
