/*
 * generated by Xtext 2.13.0
 */
package org.assertx.swing.validation

import com.google.common.collect.HashMultimap
import javax.swing.JDialog
import javax.swing.JFrame
import org.assertx.swing.assertXSwing.AXSTestCase
import org.assertx.swing.assertXSwing.AssertXSwingPackage
import org.eclipse.xtext.validation.Check

/**
 * This class contains custom validation rules. 
 *
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
class AssertXSwingValidator extends AbstractAssertXSwingValidator {
	
	static val ISSUE_CODE_PREFIX = 'org.assertx.swing.'
	public static val SAME_NAME_METHODS = ISSUE_CODE_PREFIX + 'SameNameMethods'
	public static val UNTESTABLE_TYPE = ISSUE_CODE_PREFIX + 'UntestableType'
	public static val NULL_METHOD_NAME = ISSUE_CODE_PREFIX + 'NullMethodName'
	
	@Check
	def void checkMethodNamesAreUnique(AXSTestCase tc){
		val tests = HashMultimap.create
		
		for (test : tc.tests)
			tests.put(test.name, test)
		
		for (e : tests.asMap.entrySet){
			val collisions = e.value
			if(collisions.size > 1){
				for(c : collisions){
					warning("Duplicate method '" + c.name + "': methods should use different and explanatory names",
						c,	AssertXSwingPackage.eINSTANCE.AXSTestMethod_Name,
						SAME_NAME_METHODS
					)
				}
			}
		}
	}
	
	@Check
	def void checkTestedClassMustBeSubclassOfJFrame(AXSTestCase tc){
		val clazz = tc.testedTypeRef.toLightweightTypeReference
		if( !(clazz.isSubtypeOf(JFrame) || clazz.isSubtypeOf(JDialog)) )
			error("Untestable type: the class under test must be a subclass of either 'javax.swing.JFrame' or 'javax.swing.JDialog'",
				AssertXSwingPackage.eINSTANCE.AXSTestCase_TestedTypeRef,
				UNTESTABLE_TYPE	)
	}
}
