/*
 * generated by Xtext 2.13.0
 */
package org.assertx.swing.ui.outline

import com.google.inject.Inject
import org.assertx.swing.assertXSwing.AXSFile
import org.assertx.swing.assertXSwing.AXSMatcher
import org.assertx.swing.assertXSwing.AXSSettings
import org.assertx.swing.assertXSwing.AXSTestCase
import org.assertx.swing.assertXSwing.AXSTestMethod
import org.assertx.swing.assertXSwing.AssertXSwingPackage
import org.assertx.swing.util.AssertXSwingUtils
import org.eclipse.xtext.ui.editor.outline.IOutlineNode
import org.eclipse.xtext.ui.editor.outline.impl.DefaultOutlineTreeProvider
import org.eclipse.xtext.ui.editor.outline.impl.DocumentRootNode
import org.eclipse.xtext.xtype.XtypePackage

import static extension org.assertx.swing.util.AssertXSwingStaticExtensions.*

/**
 * Customization of the default outline structure.
 * 
 * See https://www.eclipse.org/Xtext/documentation/310_eclipse_support.html#outline
 */
class AssertXSwingOutlineTreeProvider extends DefaultOutlineTreeProvider {

	@Inject extension AssertXSwingUtils

	def _isLeaf(AXSSettings s) {
		true
	}

	def _isLeaf(AXSTestMethod t) {
		true
	}

	def _isLeaf(AXSMatcher m) {
		true
	}

	def _createChildren(IOutlineNode parentNode, AXSTestCase tc) {

		val node = createEStructuralFeatureNode(
			parentNode,
			tc,
			AssertXSwingPackage.eINSTANCE.AXSTestCase_FieldName,
			getImage('field_private_obj.gif'),
			getText(tc.checkedFieldName + ' : ' + tc.fieldType?.simpleName),
			true
		)

		node.textRegion = locationInFileProvider.getSignificantTextRegion(
			tc,
			AssertXSwingPackage.eINSTANCE.AXSTestCase_FieldName,
			-1
		)

		for (member : tc.members) {
			createNode(parentNode, member)
		}
	}

	def _createChildren(DocumentRootNode rootNode, AXSFile file) {

		if (file.packName !== null) {
			createEStructuralFeatureNode(
				rootNode,
				file,
				AssertXSwingPackage.eINSTANCE.AXSFile_PackName,
				file.getImage,
				file.packName,
				true
			)
		}

		if (file.imports !== null) {
			createEStructuralFeatureNode(
				rootNode,
				file.imports,
				XtypePackage.eINSTANCE.XImportSection_ImportDeclarations,
				file.imports.getImage,
				file.imports.getText,
				false
			)
		}

		for (definition : file.definitions) {
			createNode(rootNode, definition)
		}
	}

	def getImage(Object o) {
		imageDispatcher.invoke(o)
	}

	def getText(Object o) {
		textDispatcher.invoke(o)
	}
}
