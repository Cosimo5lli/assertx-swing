/*
 * generated by Xtext 2.13.0
 */
package org.assertx.swing.ui.outline

import com.google.inject.Inject
import org.assertx.swing.assertXSwing.AXSSettings
import org.assertx.swing.assertXSwing.AXSTestCase
import org.assertx.swing.assertXSwing.AXSTestMethod
import org.assertx.swing.assertXSwing.AssertXSwingPackage
import org.eclipse.jface.viewers.StyledString
import org.eclipse.xtext.ui.editor.outline.IOutlineNode
import org.eclipse.xtext.ui.editor.outline.impl.DefaultOutlineTreeProvider
import org.eclipse.xtext.ui.editor.outline.impl.DocumentRootNode
import org.eclipse.xtext.xbase.XbasePackage
import org.assertx.swing.AssertXSwingUtils

/**
 * Customization of the default outline structure.
 *
 * See https://www.eclipse.org/Xtext/documentation/310_eclipse_support.html#outline
 */
class AssertXSwingOutlineTreeProvider extends DefaultOutlineTreeProvider {
	
	@Inject extension AssertXSwingUtils
	
	def _isLeaf(AXSSettings s){
		true
	}
	
	def _isLeaf(AXSTestMethod t){
		true
	}
	
	def _createChildren(IOutlineNode parentNode, AXSTestCase tc){
		val testedClassString = new StyledString(tc.checkedTypeRefName, StyledString.COUNTER_STYLER)
		
		createEStructuralFeatureNode(parentNode,
			tc,
			AssertXSwingPackage.eINSTANCE.AXSTestCase_TestedTypeRef,
			labelProvider.getImage(tc.testedTypeRef),
			testedClassString,
			true
		)
		
		val styledString = new StyledString(tc.checkedFieldName).append(
			new StyledString(': ' + tc.fieldType?.simpleName, StyledString.DECORATIONS_STYLER)
		)
			
		val node = createEStructuralFeatureNode(parentNode,
			tc,
			AssertXSwingPackage.eINSTANCE.AXSTestCase_FieldName,
			labelProvider.getImage(XbasePackage.eINSTANCE.xbaseFactory.createXVariableDeclaration),
			styledString,
			true
		)
		
		node.textRegion = locationInFileProvider.getSignificantTextRegion(
			tc, AssertXSwingPackage.eINSTANCE.AXSTestCase_FieldName, -1
		)
		
		if(tc.settings !== null){
			createNode(parentNode, tc.settings)
		}
		
		for(test : tc.tests){
			createNode(parentNode, test)
		}
	}
	
	def _createChildren(DocumentRootNode rootNode, AXSTestCase tc){
		val fileName = tc.eResource.URI.trimFileExtension.lastSegment
		val node = createEObjectNode(rootNode, tc, labelProvider.getImage(tc),	fileName, false)
		node.shortTextRegion = locationInFileProvider.getFullTextRegion(tc)
	}
}
